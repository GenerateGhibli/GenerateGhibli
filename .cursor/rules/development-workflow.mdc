---
description: 
globs: 
alwaysApply: true
---
# GenerateGhibli 开发工作流程

## 开发环境搭建

### 系统要求
- **Node.js**: 18.x 或更高版本
- **npm**: 9.x 或更高版本
- **Git**: 2.x 或更高版本
- **操作系统**: macOS, Linux, Windows (推荐 WSL2)

### 环境配置

#### 1. 克隆项目
```bash
git clone https://github.com/GenerateGhibli/GenerateGhibli.git
cd GenerateGhibli
```

#### 2. 安装依赖
```bash
npm install
```

#### 3. 环境变量配置
复制 `.env.local.example` 到 `.env.local` 并配置必要的环境变量:

```env
# GitHub API 配置
GITHUB_TOKEN=your_github_personal_access_token
GITHUB_OWNER=GenerateGhibli
GITHUB_REPO=GenerateGhibli

# 认证配置
JWT_SECRET=your_secure_jwt_secret
ACCESS_PASSWORD=your_admin_password

# 应用配置
DOMAIN=localhost
NODE_ENV=development
```

#### 4. 启动开发服务器
```bash
npm run dev
```

访问 `http://localhost:3000` 查看应用。

### 开发工具配置

#### VS Code 扩展推荐
- **ES7+ React/Redux/React-Native snippets**: React 代码片段
- **Tailwind CSS IntelliSense**: Tailwind 类名提示
- **Next.js snippets**: Next.js 代码片段
- **ESLint**: 代码质量检查
- **Prettier**: 代码格式化
- **Auto Rename Tag**: HTML 标签重命名
- **GitLens**: Git 信息增强

#### ESLint 配置
项目使用 Next.js 推荐的 ESLint 配置，配置文件: [eslint.config.mjs](mdc:eslint.config.mjs)

```bash
# 运行 ESLint 检查
npm run lint

# 自动修复 ESLint 问题
npm run lint -- --fix
```

## Git 工作流程

### 分支策略

#### 分支类型
- **main**: 生产分支，包含稳定的代码
- **develop**: 开发分支，集成最新的功能
- **feature/***: 功能分支，开发新功能
- **hotfix/***: 热修复分支，修复生产环境问题
- **release/***: 发布分支，准备发布版本

#### 分支命名规范
```
feature/新功能描述
hotfix/修复问题描述
release/版本号
```

### 开发流程

#### 1. 创建功能分支
```bash
# 从 develop 分支创建新功能分支
git checkout develop
git pull origin develop
git checkout -b feature/add-search-functionality
```

#### 2. 开发和提交
```bash
# 添加文件到暂存区
git add .

# 提交代码 (遵循提交信息规范)
git commit -m "feat: add search functionality for resources"

# 推送分支到远程仓库
git push origin feature/add-search-functionality
```

#### 3. 创建 Pull Request
- 在 GitHub 上创建 PR
- 填写详细的 PR 描述
- 请求代码审查
- 等待审查通过后合并

#### 4. 清理分支
```bash
# 切换回 develop 分支
git checkout develop

# 删除本地功能分支
git branch -d feature/add-search-functionality

# 删除远程分支
git push origin --delete feature/add-search-functionality
```

### 提交信息规范

#### 提交格式
```
<type>(<scope>): <subject>

<body>

<footer>
```

#### 提交类型
- **feat**: 新功能
- **fix**: 修复 bug
- **docs**: 文档更新
- **style**: 代码格式调整
- **refactor**: 代码重构
- **test**: 测试相关
- **chore**: 构建过程或辅助工具的变动

#### 示例
```bash
feat(auth): add JWT authentication system

- Implement login/logout functionality
- Add middleware for route protection
- Create auth API endpoints

Closes #123
```

## 代码规范

### JavaScript/TypeScript 规范

#### 命名约定
- **变量和函数**: camelCase (`userName`, `getUserData`)
- **常量**: UPPER_SNAKE_CASE (`API_BASE_URL`)
- **组件**: PascalCase (`UserProfile`, `ResourceCard`)
- **文件名**: kebab-case 或 PascalCase (`user-profile.js`, `UserProfile.tsx`)

#### 代码风格
```javascript
// 使用 const 和 let，避免 var
const API_URL = 'https://api.example.com'
let currentUser = null

// 使用箭头函数
const fetchUserData = async (userId) => {
  try {
    const response = await fetch(`${API_URL}/users/${userId}`)
    return response.json()
  } catch (error) {
    console.error('Failed to fetch user data:', error)
    throw error
  }
}

// 解构赋值
const { name, email, age } = user
const [first, ...rest] = items
```

### React 组件规范

#### 函数组件结构
```jsx
import React, { useState, useEffect } from 'react'
import PropTypes from 'prop-types'

// 组件定义
const UserProfile = ({ userId, className }) => {
  // 状态定义
  const [user, setUser] = useState(null)
  const [loading, setLoading] = useState(true)

  // 副作用
  useEffect(() => {
    fetchUserData(userId)
      .then(setUser)
      .finally(() => setLoading(false))
  }, [userId])

  // 事件处理函数
  const handleUpdate = useCallback(() => {
    // 处理更新逻辑
  }, [])

  // 条件渲染
  if (loading) {
    return <div>Loading...</div>
  }

  if (!user) {
    return <div>User not found</div>
  }

  // 主要渲染
  return (
    <div className={`user-profile ${className}`}>
      <h2>{user.name}</h2>
      <p>{user.email}</p>
    </div>
  )
}

// PropTypes 定义
UserProfile.propTypes = {
  userId: PropTypes.string.isRequired,
  className: PropTypes.string
}

// 默认 props
UserProfile.defaultProps = {
  className: ''
}

export default UserProfile
```

#### 组件文件结构
```javascript
// 1. 第三方库导入
import React from 'react'
import { NextPage } from 'next'

// 2. 本地库导入
import { Button } from '@/components/ui/button'
import { Card } from '@/components/ui/card'

// 3. 工具函数导入
import { formatDate } from '@/lib/utils'

// 4. 类型定义
interface Props {
  title: string
  date: Date
}

// 5. 组件定义
const MyComponent: NextPage<Props> = ({ title, date }) => {
  // 组件逻辑
}

// 6. 导出
export default MyComponent
```

### CSS/Tailwind 规范

#### Tailwind 类名使用
```jsx
// 推荐: 使用 Tailwind 实用类
<div className="flex items-center justify-between p-4 bg-white rounded-lg shadow-md">
  <h2 className="text-xl font-semibold text-gray-800">Title</h2>
  <button className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600">
    Click me
  </button>
</div>

// 复杂样式使用 clsx 组合
import clsx from 'clsx'

const buttonClasses = clsx(
  'px-4 py-2 rounded font-medium transition-colors',
  {
    'bg-blue-500 text-white hover:bg-blue-600': variant === 'primary',
    'bg-gray-200 text-gray-800 hover:bg-gray-300': variant === 'secondary',
    'opacity-50 cursor-not-allowed': disabled
  }
)
```

#### 响应式设计
```jsx
<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
  <div className="p-4 bg-white rounded-lg">
    <h3 className="text-lg md:text-xl lg:text-2xl font-bold">
      Responsive Title
    </h3>
  </div>
</div>
```

## 测试策略

### 测试类型

#### 1. 单元测试
- 测试单个函数和组件
- 使用 Jest 和 React Testing Library
- 覆盖关键业务逻辑

#### 2. 集成测试
- 测试组件间的交互
- 测试 API 路由
- 数据流测试

#### 3. 端到端测试
- 使用 Playwright 或 Cypress
- 测试完整的用户流程
- 自动化测试关键路径

### 测试命令
```bash
# 运行所有测试
npm test

# 运行测试并生成覆盖率报告
npm run test:coverage

# 运行端到端测试
npm run test:e2e
```

## 性能优化

### 开发环境优化

#### 1. 热重载优化
- 使用 Next.js 的快速刷新
- 减少不必要的重新渲染
- 优化依赖项导入

#### 2. 构建优化
```bash
# 分析构建产物
npm run build && npx @next/bundle-analyzer

# 性能分析
npm run dev -- --turbo
```

### 生产环境优化

#### 1. 代码分割
- 路由级别的代码分割
- 动态导入重组件
- 第三方库分离

#### 2. 图片优化
- 使用 Next.js Image 组件
- WebP 格式转换
- 响应式图片

#### 3. 缓存策略
- 静态资源缓存
- API 响应缓存
- 浏览器缓存

## 调试技巧

### 开发环境调试

#### 1. React Developer Tools
- 组件树查看
- Props 和 State 检查
- 性能分析

#### 2. Network 面板
- API 请求监控
- 资源加载分析
- 网络性能优化

#### 3. Console 调试
```javascript
// 条件断点
if (process.env.NODE_ENV === 'development') {
  console.log('Debug info:', data)
}

// 性能测量
console.time('expensive-operation')
expensiveOperation()
console.timeEnd('expensive-operation')
```

### 生产环境调试

#### 1. 错误监控
- 使用 Sentry 或类似工具
- 错误边界组件
- 优雅的错误处理

#### 2. 性能监控
- Core Web Vitals 监控
- 用户体验指标
- 服务器性能监控

## 部署前检查清单

### 代码质量检查
- [ ] ESLint 检查通过
- [ ] TypeScript 类型检查
- [ ] 测试全部通过
- [ ] 代码审查完成

### 功能检查
- [ ] 所有功能正常工作
- [ ] 响应式设计正确
- [ ] 多语言支持正常
- [ ] SEO 优化完成

### 性能检查
- [ ] 页面加载速度优化
- [ ] 图片和资源压缩
- [ ] 缓存策略配置
- [ ] Core Web Vitals 达标

### 安全检查
- [ ] 环境变量安全配置
- [ ] API 端点保护
- [ ] XSS 和 CSRF 防护
- [ ] 依赖项安全扫描

## 故障排除

### 常见问题

#### 1. 依赖冲突
```bash
# 清理 node_modules 和重新安装
rm -rf node_modules package-lock.json
npm install
```

#### 2. 构建失败
```bash
# 检查 TypeScript 错误
npx tsc --noEmit

# 检查 ESLint 错误
npm run lint
```

#### 3. 运行时错误
- 检查环境变量配置
- 查看浏览器控制台错误
- 检查 API 路由配置

### 日志和监控

#### 开发环境日志
```javascript
// 结构化日志
const logger = {
  info: (message, data) => console.log(`[INFO] ${message}`, data),
  error: (message, error) => console.error(`[ERROR] ${message}`, error),
  warn: (message, data) => console.warn(`[WARN] ${message}`, data)
}
```

#### 生产环境监控
- 使用 Cloudflare Analytics
- 设置错误告警
- 监控性能指标
